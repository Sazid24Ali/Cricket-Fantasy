# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'pro.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys

## FOR FRAMELESS WINDOW
from PyQt5.QtCore import Qt ,pyqtSignal , pyqtSlot


## MODULES FOR MENU OPTIONS
from open_team_window import Ui_OPEN_WIN as open_team  # open menu WINDOW
from new_team_window import Ui_NEW_WIN as new_team  # new team menu WINDOW
from evaluate_team_window import Ui_Form as eval_team   # evaluation menu WINDOW
from PopUpBox_window import  Ui_Form as dialog_box  # multi purpose to raise erros and give info 


## FOR SHORTCUTS 
from PyQt5.QtWidgets  import QShortcut
from PyQt5.QtGui import QKeySequence

## For Database connectivity
import sqlite3



class Ui_MainWindow(object):
        def __init__(self):
                ## Connecting database
                self.connect = sqlite3.connect('CricketFantasy.db2')
                self.cursor = self.connect.cursor()

                ## INITIALISATION OF VARIABLES
                self.dic_setting_values={'points_avail' : 1000,'points_used' : 0,'batsmen' : 0,'bowlers' : 0,'wicket_keepers' :0,'all_rounders' : 0}
                self.team_name = ""
                self.batsmen_list = []
                self.bowlers_list = []
                self.all_rounders_list = []
                self.wicket_keepers_list = []
                self.Selected_PLayers = {'batsmen':[],'bowlers':[],'all_rounders':[],'wicket_keepers':[]}
                self.Available_PLayers = {'batsmen':[],'bowlers':[],'all_rounders':[],'wicket_keepers':[]}
                
        #/////////////////////*********************QT DISGNER GENERATED**************************/////////////////////////////////
        #/////------START----------//////(DONOT EDIT UNTIL YOU KNOW WHAT YOU ARE DOING )
        def setupUi(self, MainWindow):

                 
                MainWindow.setObjectName("MainWindow")
                MainWindow.resize(732, 599)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
                MainWindow.setSizePolicy(sizePolicy)
                MainWindow.setStyleSheet("background-color: rgb(255, 255, 255);")

                MainWindow.setWindowFlag(Qt.FramelessWindowHint) ### ------ FRAMELESS WINDOW LINE
                
                self.centralwidget = QtWidgets.QWidget(MainWindow)
                self.centralwidget.setObjectName("centralwidget")
                self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
                self.gridLayout.setObjectName("gridLayout")
                self.FRAME_MAIN = QtWidgets.QFrame(self.centralwidget)
                self.FRAME_MAIN.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.FRAME_MAIN.setFrameShape(QtWidgets.QFrame.Box)
                self.FRAME_MAIN.setFrameShadow(QtWidgets.QFrame.Raised)
                self.FRAME_MAIN.setObjectName("FRAME_MAIN")
                self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.FRAME_MAIN)
                self.verticalLayout_4.setObjectName("verticalLayout_4")
                self.FRAME_TEAM_SUMMARY = QtWidgets.QFrame(self.FRAME_MAIN)
                self.FRAME_TEAM_SUMMARY.setStyleSheet("background-color: rgb(240, 240, 240);")
                self.FRAME_TEAM_SUMMARY.setFrameShape(QtWidgets.QFrame.NoFrame)
                self.FRAME_TEAM_SUMMARY.setFrameShadow(QtWidgets.QFrame.Raised)
                self.FRAME_TEAM_SUMMARY.setObjectName("FRAME_TEAM_SUMMARY")
                
                self.verticalLayout = QtWidgets.QVBoxLayout(self.FRAME_TEAM_SUMMARY)
                self.verticalLayout.setObjectName("verticalLayout")
                
                self.LABEL_YOURS_SELECTIONS_DUMMY = QtWidgets.QLabel(self.FRAME_TEAM_SUMMARY)
                font = QtGui.QFont()
                font.setFamily("Microsoft JhengHei")
                font.setPointSize(10)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                font.setStyleStrategy(QtGui.QFont.PreferDefault)
                self.LABEL_YOURS_SELECTIONS_DUMMY.setFont(font)
                self.LABEL_YOURS_SELECTIONS_DUMMY.setObjectName("LABEL_YOURS_SELECTIONS_DUMMY")
                self.verticalLayout.addWidget(self.LABEL_YOURS_SELECTIONS_DUMMY)
                
                self.LAYOUT_SUMMARY = QtWidgets.QHBoxLayout()
                self.LAYOUT_SUMMARY.setObjectName("LAYOUT_SUMMARY")
                
                self.LABEL_TOTAL_BATSMEN = QtWidgets.QLabel(self.FRAME_TEAM_SUMMARY)
                font = QtGui.QFont()
                font.setFamily("Microsoft JhengHei")
                font.setPointSize(10)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                font.setStyleStrategy(QtGui.QFont.PreferDefault)
                self.LABEL_TOTAL_BATSMEN.setFont(font)
                self.LABEL_TOTAL_BATSMEN.setStyleSheet("background-color: rgb(240, 240, 240);")
                self.LABEL_TOTAL_BATSMEN.setObjectName("LABEL_TOTAL_BATSMEN")
                self.LAYOUT_SUMMARY.addWidget(self.LABEL_TOTAL_BATSMEN)
                
                self.VALUE_TOTAL_BATSMEN = QtWidgets.QLabel(self.FRAME_TEAM_SUMMARY)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.VALUE_TOTAL_BATSMEN.sizePolicy().hasHeightForWidth())
                self.VALUE_TOTAL_BATSMEN.setSizePolicy(sizePolicy)
                font = QtGui.QFont()
                font.setFamily("Microsoft JhengHei")
                font.setPointSize(13)
                font.setBold(True)
                font.setWeight(75)
                self.VALUE_TOTAL_BATSMEN.setFont(font)
                self.VALUE_TOTAL_BATSMEN.setStyleSheet("background-color: rgb(240, 240, 240);color:rgb(10, 142, 182)\n"
                "\n"
                "")
                self.VALUE_TOTAL_BATSMEN.setObjectName("VALUE_TOTAL_BATSMEN")
                self.LAYOUT_SUMMARY.addWidget(self.VALUE_TOTAL_BATSMEN)
                
                self.LABEL_TOTAL_BOWLERS = QtWidgets.QLabel(self.FRAME_TEAM_SUMMARY)
                font = QtGui.QFont()
                font.setFamily("Microsoft JhengHei")
                font.setPointSize(10)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                font.setStyleStrategy(QtGui.QFont.PreferDefault)
                self.LABEL_TOTAL_BOWLERS.setFont(font)
                self.LABEL_TOTAL_BOWLERS.setStyleSheet("background-color: rgb(240, 240, 240);")
                self.LABEL_TOTAL_BOWLERS.setObjectName("LABEL_TOTAL_BOWLERS")
                self.LAYOUT_SUMMARY.addWidget(self.LABEL_TOTAL_BOWLERS)
                self.VALUE_TOTAL_BOWLERS = QtWidgets.QLabel(self.FRAME_TEAM_SUMMARY)
                
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.VALUE_TOTAL_BOWLERS.sizePolicy().hasHeightForWidth())
                self.VALUE_TOTAL_BOWLERS.setSizePolicy(sizePolicy)
                font = QtGui.QFont()
                font.setFamily("Microsoft JhengHei")
                font.setPointSize(13)
                font.setBold(True)
                font.setWeight(75)
                self.VALUE_TOTAL_BOWLERS.setFont(font)
                self.VALUE_TOTAL_BOWLERS.setStyleSheet("background-color: rgb(240, 240, 240);\n"
                "color:rgb(10, 142, 182)\n"
                "\n"
                "")
                self.VALUE_TOTAL_BOWLERS.setObjectName("VALUE_TOTAL_BOWLERS")
                self.LAYOUT_SUMMARY.addWidget(self.VALUE_TOTAL_BOWLERS)
                
                self.LABEL_TOTAL_ALLROUNDERS = QtWidgets.QLabel(self.FRAME_TEAM_SUMMARY)
                font = QtGui.QFont()
                font.setFamily("Microsoft JhengHei")
                font.setPointSize(10)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                font.setStyleStrategy(QtGui.QFont.PreferDefault)
                self.LABEL_TOTAL_ALLROUNDERS.setFont(font)
                self.LABEL_TOTAL_ALLROUNDERS.setStyleSheet("background-color: rgb(240, 240, 240);")
                self.LABEL_TOTAL_ALLROUNDERS.setObjectName("LABEL_TOTAL_ALLROUNDERS")
                self.LAYOUT_SUMMARY.addWidget(self.LABEL_TOTAL_ALLROUNDERS)
                self.VALUE_TOTAL_ALLROUNDERS = QtWidgets.QLabel(self.FRAME_TEAM_SUMMARY)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.VALUE_TOTAL_ALLROUNDERS.sizePolicy().hasHeightForWidth())
                self.VALUE_TOTAL_ALLROUNDERS.setSizePolicy(sizePolicy)
                font = QtGui.QFont()
                font.setFamily("Microsoft JhengHei")
                font.setPointSize(13)
                font.setBold(True)
                font.setWeight(75)
                self.VALUE_TOTAL_ALLROUNDERS.setFont(font)
                self.VALUE_TOTAL_ALLROUNDERS.setStyleSheet("color:rgb(10, 142, 182);\n"
                "background-color: rgb(240, 240, 240);\n"
                "\n"
                "\n"
                "")
                self.VALUE_TOTAL_ALLROUNDERS.setObjectName("VALUE_TOTAL_ALLROUNDERS")
                self.LAYOUT_SUMMARY.addWidget(self.VALUE_TOTAL_ALLROUNDERS)
                
                self.LABEL_TOTAL_WICKET_KEEPERS = QtWidgets.QLabel(self.FRAME_TEAM_SUMMARY)
                font = QtGui.QFont()
                font.setFamily("Microsoft JhengHei")
                font.setPointSize(10)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                font.setStyleStrategy(QtGui.QFont.PreferDefault)
                self.LABEL_TOTAL_WICKET_KEEPERS.setFont(font)
                self.LABEL_TOTAL_WICKET_KEEPERS.setStyleSheet("background-color: rgb(240, 240, 240);")
                self.LABEL_TOTAL_WICKET_KEEPERS.setObjectName("LABEL_TOTAL_WICKET_KEEPERS")
                self.LAYOUT_SUMMARY.addWidget(self.LABEL_TOTAL_WICKET_KEEPERS)
                self.VALUE_TOTAL_WICKET_KEEPERS = QtWidgets.QLabel(self.FRAME_TEAM_SUMMARY)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.VALUE_TOTAL_WICKET_KEEPERS.sizePolicy().hasHeightForWidth())
                self.VALUE_TOTAL_WICKET_KEEPERS.setSizePolicy(sizePolicy)
                font = QtGui.QFont()
                font.setFamily("Microsoft JhengHei")
                font.setPointSize(13)
                font.setBold(True)
                font.setWeight(75)
                self.VALUE_TOTAL_WICKET_KEEPERS.setFont(font)
                self.VALUE_TOTAL_WICKET_KEEPERS.setStyleSheet("color:rgb(10, 142, 182);\n"
                "background-color: rgb(240, 240, 240);\n"
                "")
                self.VALUE_TOTAL_WICKET_KEEPERS.setObjectName("VALUE_TOTAL_WICKET_KEEPERS")
                self.LAYOUT_SUMMARY.addWidget(self.VALUE_TOTAL_WICKET_KEEPERS)
                self.verticalLayout.addLayout(self.LAYOUT_SUMMARY)
                self.verticalLayout_4.addWidget(self.FRAME_TEAM_SUMMARY)
                
                self.FRAME_POINTS = QtWidgets.QFrame(self.FRAME_MAIN)
                self.FRAME_POINTS.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.FRAME_POINTS.setFrameShape(QtWidgets.QFrame.NoFrame)
                self.FRAME_POINTS.setFrameShadow(QtWidgets.QFrame.Raised)
                self.FRAME_POINTS.setObjectName("FRAME_POINTS")
                
                self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.FRAME_POINTS)
                self.horizontalLayout_6.setObjectName("horizontalLayout_6")
                
                self.FRAME_AVAILABLE = QtWidgets.QFrame(self.FRAME_POINTS)
                self.FRAME_AVAILABLE.setFrameShape(QtWidgets.QFrame.NoFrame)
                self.FRAME_AVAILABLE.setFrameShadow(QtWidgets.QFrame.Raised)
                self.FRAME_AVAILABLE.setObjectName("FRAME_AVAILABLE")
                
                self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.FRAME_AVAILABLE)
                self.horizontalLayout_2.setObjectName("horizontalLayout_2")
                
                self.LABEL_POINTS_AVAIL = QtWidgets.QLabel(self.FRAME_AVAILABLE)
                font = QtGui.QFont()
                font.setFamily("Microsoft JhengHei")
                font.setPointSize(10)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                font.setStyleStrategy(QtGui.QFont.PreferDefault)
                self.LABEL_POINTS_AVAIL.setFont(font)
                self.LABEL_POINTS_AVAIL.setObjectName("LABEL_POINTS_AVAIL")
                self.horizontalLayout_2.addWidget(self.LABEL_POINTS_AVAIL)
                
                self.VALUE_POINTS_AVAIL = QtWidgets.QLabel(self.FRAME_AVAILABLE)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.VALUE_POINTS_AVAIL.sizePolicy().hasHeightForWidth())
                self.VALUE_POINTS_AVAIL.setSizePolicy(sizePolicy)
                font = QtGui.QFont()
                font.setFamily("Microsoft JhengHei")
                font.setPointSize(13)
                font.setBold(True)
                font.setWeight(75)
                self.VALUE_POINTS_AVAIL.setFont(font)
                self.VALUE_POINTS_AVAIL.setStyleSheet("color:rgb(10, 142, 182)\n"
                "\n"
                "")
                self.VALUE_POINTS_AVAIL.setObjectName("VALUE_POINTS_AVAIL")
                self.horizontalLayout_2.addWidget(self.VALUE_POINTS_AVAIL)
                self.horizontalLayout_6.addWidget(self.FRAME_AVAILABLE)
                
                spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
                self.horizontalLayout_6.addItem(spacerItem)
                self.FRAME_USED = QtWidgets.QFrame(self.FRAME_POINTS)
                self.FRAME_USED.setFrameShape(QtWidgets.QFrame.NoFrame)
                self.FRAME_USED.setFrameShadow(QtWidgets.QFrame.Plain)
                self.FRAME_USED.setObjectName("FRAME_USED")
                self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.FRAME_USED)
                self.horizontalLayout_3.setObjectName("horizontalLayout_3")
                self.LABEL_POINTS_USED = QtWidgets.QLabel(self.FRAME_USED)
                font = QtGui.QFont()
                font.setFamily("Microsoft JhengHei")
                font.setPointSize(10)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                font.setStyleStrategy(QtGui.QFont.PreferDefault)
                self.LABEL_POINTS_USED.setFont(font)
                self.LABEL_POINTS_USED.setObjectName("LABEL_POINTS_USED")
                self.horizontalLayout_3.addWidget(self.LABEL_POINTS_USED)
                
                self.VALUE_POINTS_USED = QtWidgets.QLabel(self.FRAME_USED)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.VALUE_POINTS_USED.sizePolicy().hasHeightForWidth())
                self.VALUE_POINTS_USED.setSizePolicy(sizePolicy)
                font = QtGui.QFont()
                font.setFamily("Microsoft JhengHei")
                font.setPointSize(13)
                font.setBold(True)
                font.setWeight(75)
                self.VALUE_POINTS_USED.setFont(font)
                self.VALUE_POINTS_USED.setStyleSheet("color:rgb(10, 142, 182)\n"
                "\n"
                "")
                self.VALUE_POINTS_USED.setObjectName("VALUE_POINTS_USED")
                self.horizontalLayout_3.addWidget(self.VALUE_POINTS_USED)
                self.horizontalLayout_6.addWidget(self.FRAME_USED)
                self.verticalLayout_4.addWidget(self.FRAME_POINTS)
                
                self.FRAME_PLAYERS = QtWidgets.QFrame(self.FRAME_MAIN)
                self.FRAME_PLAYERS.setFrameShape(QtWidgets.QFrame.NoFrame)
                self.FRAME_PLAYERS.setFrameShadow(QtWidgets.QFrame.Raised)
                self.FRAME_PLAYERS.setObjectName("FRAME_PLAYERS")
                
                self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.FRAME_PLAYERS)
                self.horizontalLayout_4.setObjectName("horizontalLayout_4")
                
                self.FRAME_PLAYERS_AVAILABLE = QtWidgets.QFrame(self.FRAME_PLAYERS)
                self.FRAME_PLAYERS_AVAILABLE.setStyleSheet("border-color: rgb(0, 0, 0);")
                self.FRAME_PLAYERS_AVAILABLE.setFrameShape(QtWidgets.QFrame.Box)
                self.FRAME_PLAYERS_AVAILABLE.setFrameShadow(QtWidgets.QFrame.Raised)
                self.FRAME_PLAYERS_AVAILABLE.setObjectName("FRAME_PLAYERS_AVAILABLE")
                
                self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.FRAME_PLAYERS_AVAILABLE)
                self.verticalLayout_2.setObjectName("verticalLayout_2")
                
                self.FRAME_RBUTTONS = QtWidgets.QFrame(self.FRAME_PLAYERS_AVAILABLE)
                self.FRAME_RBUTTONS.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.FRAME_RBUTTONS.setFrameShadow(QtWidgets.QFrame.Raised)
                self.FRAME_RBUTTONS.setObjectName("FRAME_RBUTTONS")
                
                self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.FRAME_RBUTTONS)
                self.horizontalLayout_5.setObjectName("horizontalLayout_5")
                
                self.RBUTTON_BAT = QtWidgets.QRadioButton(self.FRAME_RBUTTONS)
                font = QtGui.QFont()
                font.setFamily("Microsoft JhengHei")
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.RBUTTON_BAT.setFont(font)
                self.RBUTTON_BAT.setObjectName("RBUTTON_BAT")
                self.horizontalLayout_5.addWidget(self.RBUTTON_BAT)
                
                self.RBUTTON_BOW = QtWidgets.QRadioButton(self.FRAME_RBUTTONS)
                font = QtGui.QFont()
                font.setFamily("Microsoft JhengHei")
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.RBUTTON_BOW.setFont(font)
                self.RBUTTON_BOW.setObjectName("RBUTTON_BOW")
                self.horizontalLayout_5.addWidget(self.RBUTTON_BOW)
                
                self.RBUTTON_ALLR = QtWidgets.QRadioButton(self.FRAME_RBUTTONS)
                font = QtGui.QFont()
                font.setFamily("Microsoft JhengHei")
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.RBUTTON_ALLR.setFont(font)
                self.RBUTTON_ALLR.setObjectName("RBUTTON_ALLR")
                self.horizontalLayout_5.addWidget(self.RBUTTON_ALLR)
                
                self.RBUTTON_WK = QtWidgets.QRadioButton(self.FRAME_RBUTTONS)
                font = QtGui.QFont()
                font.setFamily("Microsoft JhengHei")
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.RBUTTON_WK.setFont(font)
                self.RBUTTON_WK.setObjectName("RBUTTON_WK")
                self.horizontalLayout_5.addWidget(self.RBUTTON_WK)
                self.verticalLayout_2.addWidget(self.FRAME_RBUTTONS)
                
                self.LIST_AVAILABLE_PLAYERS = QtWidgets.QListWidget(self.FRAME_PLAYERS_AVAILABLE)
                self.LIST_AVAILABLE_PLAYERS.setFrameShape(QtWidgets.QFrame.NoFrame)
                self.LIST_AVAILABLE_PLAYERS.setObjectName("LIST_AVAILABLE_PLAYERS")
                self.verticalLayout_2.addWidget(self.LIST_AVAILABLE_PLAYERS)
                self.horizontalLayout_4.addWidget(self.FRAME_PLAYERS_AVAILABLE)
                
                self.LABEL_ARROW_DUMMY = QtWidgets.QLabel(self.FRAME_PLAYERS)
                font = QtGui.QFont()
                font.setFamily("Microsoft JhengHei")
                font.setPointSize(26)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                font.setStyleStrategy(QtGui.QFont.PreferDefault)
                self.LABEL_ARROW_DUMMY.setFont(font)
                self.LABEL_ARROW_DUMMY.setObjectName("LABEL_ARROW_DUMMY")
                self.horizontalLayout_4.addWidget(self.LABEL_ARROW_DUMMY)
                
                self.FRAME_PLAYERS_SELECTED = QtWidgets.QFrame(self.FRAME_PLAYERS)
                self.FRAME_PLAYERS_SELECTED.setFrameShape(QtWidgets.QFrame.Box)
                self.FRAME_PLAYERS_SELECTED.setFrameShadow(QtWidgets.QFrame.Raised)
                self.FRAME_PLAYERS_SELECTED.setObjectName("FRAME_PLAYERS_SELECTED")
                
                self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.FRAME_PLAYERS_SELECTED)
                self.verticalLayout_3.setObjectName("verticalLayout_3")
                
                self.FRAME_TEAM_NAME = QtWidgets.QFrame(self.FRAME_PLAYERS_SELECTED)
                self.FRAME_TEAM_NAME.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.FRAME_TEAM_NAME.setFrameShadow(QtWidgets.QFrame.Raised)
                self.FRAME_TEAM_NAME.setObjectName("FRAME_TEAM_NAME")
                
                self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.FRAME_TEAM_NAME)
                self.horizontalLayout_7.setObjectName("horizontalLayout_7")
                
                self.LABEL_TEAM_NAME = QtWidgets.QLabel(self.FRAME_TEAM_NAME)
                font = QtGui.QFont()
                font.setFamily("Microsoft JhengHei")
                font.setPointSize(10)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                font.setStyleStrategy(QtGui.QFont.PreferDefault)
                self.LABEL_TEAM_NAME.setFont(font)
                self.LABEL_TEAM_NAME.setIndent(29)
                self.LABEL_TEAM_NAME.setObjectName("LABEL_TEAM_NAME")
                self.horizontalLayout_7.addWidget(self.LABEL_TEAM_NAME)
                
                self.VALUE_TEAM_NAME = QtWidgets.QLabel(self.FRAME_TEAM_NAME)
                font = QtGui.QFont()
                font.setFamily("Microsoft JhengHei")
                font.setPointSize(10)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                font.setStyleStrategy(QtGui.QFont.PreferDefault)
                self.VALUE_TEAM_NAME.setFont(font)
                self.VALUE_TEAM_NAME.setStyleSheet("color: rgb(63, 200, 243);")
                self.VALUE_TEAM_NAME.setObjectName("VALUE_TEAM_NAME")
                self.horizontalLayout_7.addWidget(self.VALUE_TEAM_NAME)
                self.verticalLayout_3.addWidget(self.FRAME_TEAM_NAME)
                
                self.LIST_SELECTED_PLAYERS = QtWidgets.QListWidget(self.FRAME_PLAYERS_SELECTED)
                self.LIST_SELECTED_PLAYERS.setFrameShape(QtWidgets.QFrame.NoFrame)
                self.LIST_SELECTED_PLAYERS.setObjectName("LIST_SELECTED_PLAYERS")
                self.verticalLayout_3.addWidget(self.LIST_SELECTED_PLAYERS)
                self.horizontalLayout_4.addWidget(self.FRAME_PLAYERS_SELECTED)
                self.verticalLayout_4.addWidget(self.FRAME_PLAYERS)
                self.gridLayout.addWidget(self.FRAME_MAIN, 0, 0, 1, 1)
                MainWindow.setCentralWidget(self.centralwidget)
                self.menubar = QtWidgets.QMenuBar(MainWindow)

                self.menubar.setGeometry(QtCore.QRect(0, 0, 732, 21))
                self.menubar.setObjectName("menubar")
                self.menuManage_Teams = QtWidgets.QMenu(self.menubar)
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                self.menuManage_Teams.setFont(font)
                self.menuManage_Teams.setStyleSheet("selection-background-color:rgb(194, 236, 244);\n"
                "background-color: rgb(255, 255, 255);")
                self.menuManage_Teams.setObjectName("menuManage_Teams")
                MainWindow.setMenuBar(self.menubar)
                self.actionNEW_Team = QtWidgets.QAction(MainWindow)
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                self.actionNEW_Team.setFont(font)
                self.actionNEW_Team.setShortcutContext(QtCore.Qt.WindowShortcut)
                self.actionNEW_Team.setShortcutVisibleInContextMenu(True)
                self.actionNEW_Team.setObjectName("actionNEW_Team")
                self.actionOPEN_Team = QtWidgets.QAction(MainWindow)
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                self.actionOPEN_Team.setFont(font)
                self.actionOPEN_Team.setShortcutContext(QtCore.Qt.WindowShortcut)
                self.actionOPEN_Team.setShortcutVisibleInContextMenu(True)
                self.actionOPEN_Team.setObjectName("actionOPEN_Team")
                self.actionSAVE_Team = QtWidgets.QAction(MainWindow)
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                self.actionSAVE_Team.setFont(font)
                self.actionSAVE_Team.setShortcutContext(QtCore.Qt.WindowShortcut)
                self.actionSAVE_Team.setShortcutVisibleInContextMenu(True)
                self.actionSAVE_Team.setObjectName("actionSAVE_Team")
                self.actionEVALUATE_Team = QtWidgets.QAction(MainWindow)
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                self.actionEVALUATE_Team.setFont(font)
                self.actionEVALUATE_Team.setShortcutContext(QtCore.Qt.WindowShortcut)
                self.actionEVALUATE_Team.setShortcutVisibleInContextMenu(True)
                self.actionEVALUATE_Team.setObjectName("actionEVALUATE_Team")
                self.actionQUIT = QtWidgets.QAction(MainWindow)
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                self.actionQUIT.setFont(font)
                self.actionQUIT.setShortcutContext(QtCore.Qt.ApplicationShortcut)
                self.actionQUIT.setShortcutVisibleInContextMenu(True)
                self.actionQUIT.setObjectName("actionQUIT")
                self.menuManage_Teams.addAction(self.actionNEW_Team)
                self.menuManage_Teams.addAction(self.actionOPEN_Team)
                self.menuManage_Teams.addAction(self.actionSAVE_Team)
                self.menuManage_Teams.addAction(self.actionEVALUATE_Team)
                self.menuManage_Teams.addAction(self.actionQUIT)
                self.menubar.addAction(self.menuManage_Teams.menuAction())

                
                #/////------END----------//////( DONOT EDIT UNTIL YOU KNOW WHAT YOU ARE DOING )




                #////////*******************-----------------------------------------------------------------*****************//////

                ## Menu Bar options triggering
                self.actionQUIT.triggered.connect(lambda: sys.exit())
                self.actionSAVE_Team.triggered.connect(lambda :self.call_menu_func(ctg='Save',message="Details Saved Succesfully") )
                self.actionOPEN_Team.triggered.connect(lambda :self.call_menu_func(ctg='Open'))
                self.actionNEW_Team.triggered.connect(lambda :self.call_menu_func(ctg='New'))
                self.actionEVALUATE_Team.triggered.connect(lambda :self.call_menu_func(ctg='Eval'))

                
                ### SHORTCUT (ESC) TO QUIT THE MAIN APPLICATION
                QShortcut(QKeySequence('Esc'), MainWindow).activated.connect(lambda :sys.exit())



                #/////------START----------//////(DONOT EDIT UNTIL YOU KNOW WHAT YOU ARE DOING )
                QtCore.QMetaObject.connectSlotsByName(MainWindow)
                MainWindow.setTabOrder(self.RBUTTON_BAT, self.RBUTTON_BOW)
                MainWindow.setTabOrder(self.RBUTTON_BOW, self.RBUTTON_ALLR)
                MainWindow.setTabOrder(self.RBUTTON_ALLR, self.RBUTTON_WK)
                MainWindow.setTabOrder(self.RBUTTON_WK, self.LIST_AVAILABLE_PLAYERS)
                MainWindow.setTabOrder(self.LIST_AVAILABLE_PLAYERS, self.LIST_SELECTED_PLAYERS)
                #/////------END----------//////(DONOT EDIT UNTIL YOU KNOW WHAT YOU ARE DOING )

                                ## rADIO bUTTONS triggering
                self.RBUTTON_BOW.clicked.connect(self.selecting_team)
                self.RBUTTON_BAT.clicked.connect(self.selecting_team)
                self.RBUTTON_WK.clicked.connect(self.selecting_team)
                self.RBUTTON_ALLR.clicked.connect(self.selecting_team)

                self.MainWindow = MainWindow 

                self.retranslateUi(MainWindow)
                
                ## LIST WIDGET SELECTED ITEMS  REMOVAL 
                self.LIST_AVAILABLE_PLAYERS.itemDoubleClicked.connect(self.avail_rmv)
                self.LIST_SELECTED_PLAYERS.itemDoubleClicked.connect(self.selec_rmv)



        def call_menu_func(self,**kwargs):
                "THIS THE FUNCTION WHICH MAKES AND  OPENS THE MENU BAR FUNCTIONS AND AS WELL ERROR MESSAGE DIALOG BOXES"
                self.func_widget = QtWidgets.QWidget()
                if kwargs['ctg'] == 'Save':
                        if self.save_check():
                                self.func_call = dialog_box()
                                self.func_call.setupUi(self.func_widget,kwargs['message'],self.Selected_PLayers,self.team_name)
                                self.func_widget.show()
                elif kwargs['ctg'] == 'Eval':
                        self.func_call = eval_team()
                        self.func_call.setupUi(self.func_widget)
                        self.func_widget.show()
                elif kwargs['ctg'] == 'Open':
                        self.func_call = open_team()
                        self.func_call.setupUi(self.func_widget)
                        self.func_call.submitted.connect(self.open_team)
                        self.func_widget.show()
                elif kwargs['ctg'] == 'New':
                        self.func_call = new_team()
                        self.func_call.setupUi(self.func_widget)
                        self.func_call.submitted.connect(self.get_name)
                        self.func_widget.show()
                elif kwargs['ctg'] == 'Error':
                        self.func_call = dialog_box()
                        self.func_call.setupUi(self.func_widget,kwargs['message'])
                        self.func_widget.show()
                



        def avail_rmv(self,value):
                " TO REMOVE PLAYERS FROM LIST_AVAILABLE_PLAYERS AND ADD TO LIST_SELECTED_PLAYERS "
                ele = value.text()
                if self.checking():
                        self.cursor.execute("SELECT VALUE FROM STATS WHERE PLAYER = '"+ele+"';")
                        points = self.cursor.fetchall()[0][0]
                        self.Available_PLayers[self.dic_value].remove(ele)
                        self.Selected_PLayers[self.dic_value].append(ele)
                        self.dic_setting_values[self.dic_value] += 1 
                        self.dic_setting_values['points_used'] += points 
                        self.setting_values()
                else:
                        self.selecting_team()

        def selec_rmv(self,value):
                " TO REMOVE PLAYERS FROM LIST_SELECTED_PLAYERS AND ADD TO LIST_AVAILABLE_PLAYERS"
                ele = value.text()
                self.rm_player = ele
                self.cursor.execute("SELECT VALUE FROM STATS WHERE PLAYER = '"+ele+"';")
                points = self.cursor.fetchall()[0][0]
                self.dic_setting_values['points_used'] -= points                 
                try:
                        self.Selected_PLayers[self.dic_value].remove(ele)
                        self.Available_PLayers[self.dic_value].append(ele)
                        self.dic_setting_values[self.dic_value] -= 1 
                        self.setting_values()
                except:
                        self.team_rm_player(ele)
                        self.selecting_team()

        def team_rm_player(self,ele):
                " SPECIAL FUNCTION TO REMOVE FROM LIST_SELECTED_PLAYERS USED WHEN "
                " INVOKED WHEN OTHER CATOGORY PLAYER IS REMOVED FROM LIST_SELECTED_PLAYERS "
                for i in self.Selected_PLayers:
                        if ele in self.Selected_PLayers[i]:
                                self.Selected_PLayers[i].remove(ele)
                                self.Available_PLayers[i].append(ele)
                                self.dic_setting_values[i] -= 1 
                                self.setting_values()
                        else:
                                continue
        def checking(self):
                " SOME BASIC CONDITIONS TO EVALUATE THE LISTS "
                if self.dic_value == 'wicket_keepers' and self.LIST_AVAILABLE_PLAYERS.count() == 1 :
                        self.call_menu_func(ctg='Error',message="You have to select only one wicket keeper")
                        return 0
                elif self.LIST_SELECTED_PLAYERS.count() > 10 :
                        self.call_menu_func(ctg='Error',message="You can't select more than 11 players")
                        return 0

                
                return 1
        def save_check(self):
                "CONDITIONS TO CHECK BEFORE SAVING SAVE"
                if self.LIST_SELECTED_PLAYERS.count() == 0:
                        if self.team_name :
                                self.call_menu_func(ctg='Error',message='Select the Players ')  
                                return 0      
                        else:
                                self.call_menu_func(ctg='Error',message='Create Or Open a Team To SAVE It ')
                                return 0
                elif self.LIST_SELECTED_PLAYERS.count() < 10:
                        self.call_menu_func(ctg='Error',message='Please Select eleven(11) Players') 
                        return 0
                elif self.dic_setting_values['points_avail'] <= -1:
                        self.call_menu_func(ctg='Error',message="Maximum points used ")
                        return 0
                return 1


        def selecting_team(self):
                " CHECKING  RADIO BUTTONS AND ADDDING PLAYER TO LIST WIDGETS AS PER CATOGORY "
                
                self.LIST_SELECTED_PLAYERS.clear()
                self.LIST_AVAILABLE_PLAYERS.clear()

                for i in self.Selected_PLayers :
                        self.LIST_SELECTED_PLAYERS.addItems(self.Selected_PLayers[i])
                if self.RBUTTON_WK.isChecked() == True:
                        self.dic_value = 'wicket_keepers'
                        self.LIST_AVAILABLE_PLAYERS.addItems(self.Available_PLayers[self.dic_value])
                elif self.RBUTTON_BOW.isChecked() == True:
                        self.dic_value = 'bowlers'
                        self.LIST_AVAILABLE_PLAYERS.addItems(self.Available_PLayers[self.dic_value])
                elif self.RBUTTON_BAT.isChecked() == True:
                        self.dic_value = 'batsmen'
                        self.LIST_AVAILABLE_PLAYERS.addItems(self.Available_PLayers[self.dic_value])
                elif self.RBUTTON_ALLR.isChecked() == True:
                        self.dic_value = 'all_rounders'
                        self.LIST_AVAILABLE_PLAYERS.addItems(self.Available_PLayers[self.dic_value])
                        

        def get_data(self):
                " TO RETRIVE THE AVAILABLE PLAYERS FROM DATABASE"
                self.cursor.execute("SELECT PLAYER FROM STATS WHERE CTG='BAT'")
                X=self.cursor.fetchall()
                for i in X :self.batsmen_list += [i[0],]

                self.cursor.execute("SELECT PLAYER FROM STATS WHERE CTG='BWL'")
                X=self.cursor.fetchall()
                for i in X :self.bowlers_list += [i[0],]
                
                self.cursor.execute("SELECT PLAYER FROM STATS WHERE CTG='WK'")
                X=self.cursor.fetchall()
                for i in X :self.wicket_keepers_list += [i[0],]

                self.cursor.execute("SELECT PLAYER FROM STATS WHERE CTG='AR'")
                X=self.cursor.fetchall()
                for i in X :self.all_rounders_list += [i[0],]    

                self.Available_PLayers = {'batsmen':self.batsmen_list,'bowlers':self.bowlers_list,'all_rounders':self.all_rounders_list,'wicket_keepers':self.wicket_keepers_list}
                 

        def setting_values(self):
                " ADDING DATA TO LABEL OF THE MAIN WINDOW"
                self.dic_setting_values['points_avail']=1000-self.dic_setting_values['points_used']
                self.VALUE_TEAM_NAME.setText(self.team_name)
                self.VALUE_TOTAL_BATSMEN.setText(str(self.dic_setting_values['batsmen']))
                self.VALUE_TOTAL_BOWLERS.setText(str(self.dic_setting_values['bowlers']))
                self.VALUE_TOTAL_WICKET_KEEPERS.setText(str(self.dic_setting_values['wicket_keepers']))
                self.VALUE_TOTAL_ALLROUNDERS.setText(str(self.dic_setting_values['all_rounders']))
                self.VALUE_POINTS_AVAIL.setText(str(self.dic_setting_values['points_avail']))
                self.VALUE_POINTS_USED.setText(str(self.dic_setting_values['points_used']))
                
                self.selecting_team()

        def get_name(self,team_name):
                " RETERVING TEAM NAME FROM NEW TEAM WINDOW "
                self.team_name = team_name
                self.func_call.closing()
                self.get_data()
                self.enable_btns()
                self.setting_values()

        def open_team(self,team_name):
                " TO RETRIVE TEAM NAME FROM OPEN TEAM WINDOE  "
                " ALSO TO INITIALISATION THE LABELS AND LIST  "
                for i in self.Selected_PLayers:
                        self.Available_PLayers[i].clear()
                        self.Selected_PLayers[i].clear()
                self.dic_setting_values={'points_avail' : 1000,'points_used' : 0,'batsmen' : 0,'bowlers' : 0,'wicket_keepers' :0,'all_rounders' : 0}
                self.LIST_AVAILABLE_PLAYERS.clear()
                self.LIST_SELECTED_PLAYERS.clear()

                self.team_name = team_name
                self.func_call.closing()
                self.cursor.execute("SELECT PLAYERS,VALUE FROM TEAMS WHERE NAME = '"+self.team_name+"';")
                cur_value = self.cursor.fetchall()[0]
                players = cur_value[0].split()
                value = cur_value[1].split()
                for i in value : self.dic_setting_values['points_used']+=int(i)
                self.dic_setting_values['points_avail'] = 1000 - self.dic_setting_values['points_used']
                self.get_data()
                for k in players:
                        for i in self.Available_PLayers:
                                for j in self.Available_PLayers[i]:
                                        if j == k:
                                                self.Available_PLayers[i].remove(j)
                                                self.Selected_PLayers[i].append(j)

                self.dic_setting_values['batsmen'] = len(self.Selected_PLayers['batsmen'])
                self.dic_setting_values['bowlers'] = len(self.Selected_PLayers['bowlers'])
                self.dic_setting_values['wicket_keepers'] = len(self.Selected_PLayers['wicket_keepers'])
                self.dic_setting_values['all_rounders'] = len(self.Selected_PLayers['all_rounders'])

                self.enable_btns()
                self.RBUTTON_BOW.toggle()
                self.setting_values()

        def disable_btns(self):
                " RADIO BUTTONS DIABLING"
                self.RBUTTON_BOW.setEnabled(False)
                self.RBUTTON_BAT.setEnabled(False)
                self.RBUTTON_WK.setEnabled(False)
                self.RBUTTON_ALLR.setEnabled(False)

        def enable_btns(self):
                " RADIO BUTTONS ENABLING "
                self.RBUTTON_BOW.setEnabled(True)
                self.RBUTTON_BAT.setEnabled(True)
                self.RBUTTON_WK.setEnabled(True)
                self.RBUTTON_ALLR.setEnabled(True)


        #/////------START----------//////(DONOT EDIT UNTIL YOU KNOW WHAT YOU ARE DOING )
        def retranslateUi(self, MainWindow):
                _translate = QtCore.QCoreApplication.translate
                MainWindow.setWindowTitle(_translate("MainWindow", "CricketFantasy"))
                self.LABEL_YOURS_SELECTIONS_DUMMY.setText(_translate("MainWindow", "Your Selections"))

                self.LABEL_TOTAL_BATSMEN.setText(_translate("MainWindow", "Batsmen (BAT)"))
                self.VALUE_TOTAL_BATSMEN.setText(_translate("MainWindow","##"))

                self.LABEL_TOTAL_BOWLERS.setText(_translate("MainWindow", "Bowlers (BOW)"))
                self.VALUE_TOTAL_BOWLERS.setText(_translate("MainWindow", "##"))
                
                self.LABEL_TOTAL_ALLROUNDERS.setText(_translate("MainWindow", "Allrounders (AR)"))
                self.VALUE_TOTAL_ALLROUNDERS.setText(_translate("MainWindow","##"))
                
                self.LABEL_TOTAL_WICKET_KEEPERS.setText(_translate("MainWindow", "Wicket-Keeper (WK)"))
                self.VALUE_TOTAL_WICKET_KEEPERS.setText(_translate("MainWindow", "##"))
                
                self.LABEL_POINTS_AVAIL.setText(_translate("MainWindow", "Points Available"))
                self.VALUE_POINTS_AVAIL.setText(_translate("MainWindow", "####"))
                
                self.LABEL_POINTS_USED.setText(_translate("MainWindow", "Points Used"))
                self.VALUE_POINTS_USED.setText(_translate("MainWindow", "####"))
                
                self.RBUTTON_BAT.setText(_translate("MainWindow", "BAT"))
                
                self.RBUTTON_BOW.setText(_translate("MainWindow", "BOW"))
                
                self.RBUTTON_ALLR.setText(_translate("MainWindow", "AR"))
                
                self.RBUTTON_WK.setText(_translate("MainWindow", "WK"))
                
                self.LABEL_ARROW_DUMMY.setText(_translate("MainWindow", ">"))
                
                self.LABEL_TEAM_NAME.setText(_translate("MainWindow", "Team Name  "))
                self.VALUE_TEAM_NAME.setText(_translate("MainWindow","Displayes Here"))

                self.menuManage_Teams.setTitle(_translate("MainWindow", "Manage Teams"))
                self.actionNEW_Team.setText(_translate("MainWindow", "NEW Team"))
                self.actionNEW_Team.setShortcut(_translate("MainWindow", "Ctrl+N"))
                self.actionOPEN_Team.setText(_translate("MainWindow", "OPEN Team"))
                self.actionOPEN_Team.setShortcut(_translate("MainWindow", "Ctrl+O"))
                self.actionSAVE_Team.setText(_translate("MainWindow", "SAVE Team"))
                self.actionSAVE_Team.setShortcut(_translate("MainWindow", "Ctrl+S"))
                self.actionEVALUATE_Team.setText(_translate("MainWindow", "EVALUATE Team"))
                self.actionEVALUATE_Team.setShortcut(_translate("MainWindow", "Ctrl+E"))
                self.actionQUIT.setText(_translate("MainWindow", "QUIT  "))
                self.actionQUIT.setShortcut(_translate("MainWindow", "Ctrl+Q"))
                self.disable_btns()
                
if __name__ == "__main__":

        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        main_ui = Ui_MainWindow()
        main_ui.setupUi(MainWindow)
        MainWindow.show()
        sys.exit(app.exec_())
#/////------END----------//////(DONOT EDIT UNTIL YOU KNOW WHAT YOU ARE DOING )
   
    
